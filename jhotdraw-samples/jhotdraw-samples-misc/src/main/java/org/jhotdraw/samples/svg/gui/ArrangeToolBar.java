/*
 * @(#)ArrangeToolBar.java
 *
 * Copyright (c) 2008 The authors and contributors of JHotDraw.
 * You may not use, copy or modify this file, except in compliance with the
 * accompanying license terms.
 */
package org.jhotdraw.samples.svg.gui;

import dk.sdu.mmmi.featuretracer.lib.FeatureEntryPoint;
import org.jhotdraw.api.app.Disposable;
import org.jhotdraw.gui.plaf.palette.PaletteButtonUI;
import java.awt.*;
import java.util.LinkedList;
import javax.swing.*;
import javax.swing.border.*;
import org.jhotdraw.draw.DrawingEditor;
import org.jhotdraw.draw.action.*;
import org.jhotdraw.draw.event.SelectionComponentDisplayer;
import org.jhotdraw.util.*;

/**
 * ArrangeToolBar.
 *
 * @author Werner Randelshofer
 * @version $Id$
 */

public class ArrangeToolBar extends AbstractToolBar {

    private static final long serialVersionUID = 1L;
    private SelectionComponentDisplayer displayer;
    private ResourceBundleUtil labels;

    /**
     * Creates new instance.
     */
    @FeatureEntryPoint(value="ArrangeToolbar")
    public ArrangeToolBar() {
        labels = ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels");
        setName(labels.getString(getID() + ".toolbar"));
    }

    @Override
    public void setEditor(DrawingEditor newValue) {
        if (displayer != null) {
            displayer.dispose();
            displayer = null;
        }
        super.setEditor(newValue);
        if (newValue != null) {
            displayer = new SelectionComponentDisplayer(editor, this);
            displayer.setVisibleIfCreationTool(false);
        }
    }

    @Override
    protected JComponent createDisclosedComponent(int state) {
        if (state != 1) {
            return null;
        }
        // Abort if no editor is set
        if (editor == null) {
            return null;
        }
        JPanel panel = createToolbarPanel();

        panel.add(createPanelButton(disposables, new SendToBackAction(editor)), createBackGrid());
        panel.add(createPanelButton(disposables, new BringToFrontAction(editor)), createFrontGrid());

        return panel;
    }

    /**
     * Creates the toolbar panel for the Arrange feature
     */
    private JPanel createToolbarPanel(){
        JPanel p = new JPanel();
        p.setOpaque(false);
        p.setBorder(new EmptyBorder(5, 5, 5, 8));
        GridBagLayout layout = new GridBagLayout();
        p.setLayout(layout);
        return p;
    }

    private AbstractButton createPanelButton(LinkedList<Disposable> disposables, BringToFrontAction action){
        disposables.add(action);
        return createPanelButtonFactory(action, action.ID);
    }

    private AbstractButton createPanelButton(LinkedList<Disposable> disposables, SendToBackAction action){
        disposables.add(action);
        return createPanelButtonFactory(action, action.ID);
    }

    /**
     * Factory method for creating the buttons
     * @param buttonAction The action the button has to perform.
     * @param actionID The ID of the action the button performs.
     * @return
     */
    private AbstractButton createPanelButtonFactory(AbstractSelectedAction buttonAction, String actionID){
        AbstractButton btn = new JButton(buttonAction);
        btn.setUI((PaletteButtonUI) PaletteButtonUI.createUI(btn));
        btn.setText(null);
        labels.configureToolBarButton(btn, actionID);
        btn.putClientProperty("hideActionText", Boolean.TRUE);

        return btn;
    }

    /**
     * Creates the grid layout for the BringToFront button
     */
    private GridBagConstraints createFrontGrid(){
        GridBagConstraints frontButtonGrid = new GridBagConstraints();
        frontButtonGrid.gridy = 1;
        frontButtonGrid.insets = new Insets(3, 0, 0, 0);
        frontButtonGrid.anchor = GridBagConstraints.NORTH;
        frontButtonGrid.weighty = 1f;
        return frontButtonGrid;
    }

    /**
     * Creates the grid layout for the SendToBack button
     */
    private GridBagConstraints createBackGrid(){
        GridBagConstraints backButtonGrid = new GridBagConstraints();
        backButtonGrid.gridy = 0;
        backButtonGrid.anchor = GridBagConstraints.EAST;
        return backButtonGrid;
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        setOpaque(false);
    }// </editor-fold>//GEN-END:initComponents
    @Override
    protected String getID() {
        return "arrange";
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
